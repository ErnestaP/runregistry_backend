const fs = require('fs');
const queue = require('async').queue;
const {
    generate_golden_json_for_dataset
} = require('../controllers/json_creation');
const previous_json = fs.readFileSync(`${__dirname}/previous_json.json`);

describe('Generate golden json', () => {
    const run_numbers = [
        320500,
        320569,
        320570,
        320571,
        320673,
        320674,
        320688,
        320712,
        320757,
        320804,
        320807,
        320809,
        320821,
        320822,
        320823,
        320824,
        320838,
        320839,
        320840,
        320841,
        320853,
        320854,
        320855,
        320856,
        320857,
        320858,
        320859,
        320887,
        320888,
        320916,
        320917,
        320920,
        320933,
        320934,
        320936,
        320941,
        320980,
        320995,
        320996,
        321004,
        321005,
        321006,
        321007,
        321009,
        321010,
        321011,
        321012,
        321051,
        321055,
        321067,
        321068,
        321069,
        321119,
        321121,
        321122,
        321123,
        321124,
        321126,
        321134,
        321138,
        321140,
        321149,
        321162,
        321164,
        321165,
        321166,
        321167,
        321177,
        321178,
        321218,
        321219,
        321221,
        321230,
        321231,
        321232,
        321233,
        321261,
        321262,
        321283,
        321294,
        321295,
        321296,
        321305,
        321310,
        321311,
        321312,
        321313,
        321393,
        321396,
        321397,
        321414,
        321415,
        321431,
        321432,
        321433,
        321434,
        321436,
        321457,
        321461,
        321475,
        321709,
        321710,
        321712,
        321730,
        321731,
        321732,
        321735,
        321755,
        321758,
        321759,
        321760,
        321773,
        321774,
        321775,
        321776,
        321777,
        321778,
        321780,
        321781,
        321794,
        321795,
        321796,
        321813,
        321815,
        321816,
        321817,
        321818,
        321819,
        321820,
        321831,
        321832,
        321833,
        321834,
        321879,
        321880,
        321887,
        321908,
        321909,
        321917,
        321919,
        321933,
        321960,
        321961,
        321973,
        321975,
        321988,
        321990,
        322013,
        322014,
        322022,
        322040,
        322057,
        322068,
        322079,
        322088,
        322106,
        322113,
        322118,
        322179,
        322201,
        322204,
        322222,
        322252,
        322317,
        322319,
        322322,
        322324,
        322332,
        322348,
        322355,
        322356,
        322381,
        322407,
        322430,
        322431,
        322480,
        322483,
        322484,
        322485,
        322487,
        322492,
        322510,
        322599,
        322602,
        322603,
        322605,
        322616,
        322617,
        322625,
        322633,
        323363,
        323364,
        323365,
        323367,
        323368,
        323369,
        323370,
        323371,
        323373,
        323374,
        323375,
        323376,
        323377,
        323378,
        323379,
        323388,
        323391,
        323393,
        323394,
        323395,
        323396,
        323397,
        323398,
        323399,
        323413,
        323414,
        323415,
        323416,
        323417,
        323418,
        323419,
        323420,
        323421,
        323422,
        323423,
        323470,
        323471,
        323472,
        323473,
        323474,
        323475,
        323487,
        323488,
        323492,
        323493,
        323495,
        323513,
        323523,
        323524,
        323525,
        323526,
        323693,
        323696,
        323698,
        323699,
        323700,
        323701,
        323702,
        323725,
        323726,
        323727,
        323755,
        323775,
        323778,
        323790,
        323794,
        323841,
        323857,
        323940,
        323954,
        323976,
        323978,
        323980,
        323983,
        323997,
        324021,
        324022,
        324077,
        324078,
        324201,
        324202,
        324205,
        324206,
        324207,
        324209,
        324237,
        324245,
        324293,
        324313,
        324314,
        324315,
        324318,
        324418,
        324420,
        324564,
        324571,
        324612,
        324725,
        324729,
        324747,
        324764,
        324765,
        324769,
        324772,
        324785,
        324791,
        324835,
        324840,
        324841,
        324846,
        324878,
        324897,
        324968,
        324970,
        324980,
        324997,
        324998,
        324999,
        325000,
        325001,
        325022,
        325057,
        325097,
        325098,
        325099,
        325100,
        325101,
        325102,
        325103,
        325110,
        325111,
        325112,
        325113,
        325114,
        325117,
        325159,
        325168,
        325169,
        325170,
        325172,
        325173,
        325174,
        325175
    ];
    const dataset_name = '/PromptReco/Collisions2018D/DQM';
    it('Fails with no array', async () => {
        // Call with invalid array:
    });
    it('Generates correct json', async () => {
        // const parsed_json = JSON.parse(previous_json);
        const generated_json = {};
        // for (const [key, val] of Object.entries(parsed_json)) {
        // const run_number = +key;
        // try {
        const promises = run_numbers.map(run_number => async () => {
            try {
                const ranges = await generate_golden_json_for_dataset(
                    run_number,
                    dataset_name,
                    [
                        ['dt-dt', 'GOOD'],
                        ['csc-csc', 'GOOD'],
                        ['l1t-l1tcalo', 'GOOD'],
                        ['hlt-hlt', 'GOOD'],
                        ['tracker-pixel', 'GOOD'],
                        ['tracker-strip', 'GOOD'],
                        ['tracker-track', 'GOOD'],
                        ['ecal-ecal', 'GOOD'],
                        ['hcal-hcal', 'GOOD'],
                        ['ecal-es', 'GOOD'],
                        ['egamma-egamma', 'GOOD'],
                        ['muon-muon', 'GOOD'],
                        ['jetmet-jetmet', 'GOOD'],
                        ['lumi-lumi', 'GOOD']
                    ],
                    [
                        ['cms_active', true],
                        ['bpix_ready', true],
                        ['fpix_ready', true],
                        ['tibtid_ready', true],
                        ['tecm_ready', true],
                        ['tecp_ready', true],
                        ['tob_ready', true],
                        ['ebm_ready', true],
                        ['ebp_ready', true],
                        ['eem_ready', true],
                        ['eep_ready', true],
                        ['esm_ready', true],
                        ['esp_ready', true],
                        ['hbhea_ready', true],
                        ['hbheb_ready', true],
                        ['hbhec_ready', true],
                        ['hf_ready', true],
                        ['ho_ready', true],
                        ['dtm_ready', true],
                        ['dtp_ready', true],
                        ['dt0_ready', true],
                        ['cscm_ready', true],
                        ['cscp_ready', true],
                        ['rpc_ready', true]
                    ]
                );
                console.log(ranges);
                generated_json[run_number] = ranges;
            } catch (e) {
                console.log(`Not generated for run: ${run_number}`);
                console.log(e);
            }
        });
        const number_of_workers = 1;
        const asyncQueue = queue(
            async promise => await promise(),
            number_of_workers
        );
        asyncQueue.drain = async () => {
            console.log('finished');
            fs.writeFileSync(
                './test/generated_json.json',
                JSON.stringify(generated_json),
                'utf-8'
            );
        };

        asyncQueue.push(promises);
    });
});
